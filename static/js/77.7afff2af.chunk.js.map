{"version":3,"sources":["../../common/formFields/createCP/solutionProposalCreateCP.formFields.js","../../common/constants/solutionproposalCreateCP.js","forms/CreateCP/solutionProposalCreateCP.form.js"],"names":["solutionProposalCreateCPFormFields","key","type","FORM_ELEMENT_TYPES","SELECT","others","selectOptions","customLabel","stdAssetsProposalCreateCPFormFields","INPUT","kwargs","placeholder","disabled","formOptions","noStyle","min","createFields","arr","fields","map","item","getSolutionProposal","record","standard_assets","std_ast_quantity_perkit","crate_lid_quantity_perkit","Lid","Pallet","palletized_lid_quantity_perkit","getLabels","insertType","FLC","FSC","CRT6412","CRT6418","CRT6423","CRT6435","getFields","formatStr","str","typeStr","getFieldsByColumn","getDefaultMonthValue","i","SolutionProposalCreateCPForm","id","onCancel","onNext","lead","active","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","data","createCPData","insert_type","setFields","labels","setLabels","submit","ADD_CREATE_CP_DATA","totalCostPerKit","setTotalCostPerKit","projectCost","setProjectCost","directCost","setDirectCost","updateCostPerKit","useCallback","q","r","qtyPerKitCols","getFieldValue","rateCols","forEach","push","ifNanReturnZeroFloat","sum","length","_","round","updateProjectCost","totalCostCols","temp","updateDirectCost","depCostCols","kit_based_on_usage_ratio","useEffect","STOP_STEP_LOADING","updateRemainingDisabledCols","totalKitQtysCols","totalMatReqCols","monthCols","idx","totalMatReqVal","setFieldsValue","updateTotalKitQtysCols","mould_quantity","updateMonthCols","slice","handleFieldsChange","name","currentInputField","spinning","initialValues","onFinish","layout","onFieldsChange","autoComplete","orientation","className","solution_flc","solution_fsc","solution_crate","solution_ppbox","solution_palletized_box","solution_palletized_crate","solution_pp","solution_stacking_nesting","solution_wp","style","justifyContent","span","toString","formItem","numberWithCommas","justify","htmlType","onClick","fontSize"],"mappings":"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","file":"static/js/77.7afff2af.chunk.js","sourcesContent":["import {FORM_ELEMENT_TYPES} from 'web/src/constants/formFields.constant';\n\nconst solutionAssetOptions = [\n  'FLC',\n  'FSC',\n  'CRT6412',\n  'CRT6418',\n  'CRT6423',\n  'CRT6435',\n  'Palletized CRT6412',\n  'Palletized CRT6418',\n  'Palletized CRT6423',\n  'Palletized CRT6435',\n  'PP Box',\n  'Palletized PP Box',\n  'Plastic Pallet',\n  'Wooden Pallet',\n];\n\nexport const solutionProposalCreateCPFormFields = [\n  {\n    key: 'standard_assets',\n    type: FORM_ELEMENT_TYPES.SELECT,\n    others: {\n      selectOptions: solutionAssetOptions,\n    },\n    customLabel: 'Standard Assets',\n  },\n  {\n    key: 'insert_type',\n    type: FORM_ELEMENT_TYPES.SELECT,\n    others: {\n      selectOptions: ['Insert', 'HDPE Tray'],\n    },\n    customLabel: 'Insert Type',\n  },\n  // {\n  //   key: 'cost',\n  //   type: FORM_ELEMENT_TYPES.INPUT,\n  //   kwargs: {\n  //     placeholder: 'Cost',\n  //     type:'number'\n  //   },\n  //   customLabel:'Cost'\n  // },\n];\n\n// Specification\tQuantity\tQyt/KIT\tRate\tTotal Cost\tMonth\tDep Cost\n\n// std_ast_quantity = models.FloatField(default=0, blank=True, null=True)\n// std_ast_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// std_ast_rate = models.FloatField(default=0, blank=True, null=True)\n// std_ast_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// std_ast_total_cost = models.FloatField(default=0, blank=True, null=True)\n// std_ast_month = models.FloatField(default=0, blank=True, null=True)\n// std_ast_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// crate_lid_quantity = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_rate = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_month = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// palletized_lid_quantity = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_rate = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_month = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// pallet_quantity = models.FloatField(default=0, blank=True, null=True)\n// pallet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// pallet_rate = models.FloatField(default=0, blank=True, null=True)\n// pallet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// pallet_total_cost = models.FloatField(default=0, blank=True, null=True)\n// pallet_month = models.FloatField(default=0, blank=True, null=True)\n// pallet_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// insert1_quantity = models.FloatField(default=0, blank=True, null=True)\n// insert1_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// insert1_rate = models.FloatField(default=0, blank=True, null=True)\n// insert1_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// insert1_total_cost = models.FloatField(default=0, blank=True, null=True)\n// insert1_month = models.FloatField(default=0, blank=True, null=True)\n// insert1_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// insert2_quantity = models.FloatField(default=0, blank=True, null=True)\n// insert2_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// insert2_rate = models.FloatField(default=0, blank=True, null=True)\n// insert2_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// insert2_total_cost = models.FloatField(default=0, blank=True, null=True)\n// insert2_month = models.FloatField(default=0, blank=True, null=True)\n// insert2_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// sep_sheet_quantity = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_rate = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_total_cost = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_month = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// mould_quantity = models.FloatField(default=0, blank=True, null=True)\n// mould_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// mould_rate = models.FloatField(default=0, blank=True, null=True)\n// mould_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// mould_total_cost = models.FloatField(default=0, blank=True, null=True)\n// mould_month = models.FloatField(default=0, blank=True, null=True)\n// mould_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// hdpe_quantity = models.FloatField(default=0, blank=True, null=True)\n// hdpe_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// hdpe_rate = models.FloatField(default=0, blank=True, null=True)\n// hdpe_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// hdpe_total_cost = models.FloatField(default=0, blank=True, null=True)\n// hdpe_month = models.FloatField(default=0, blank=True, null=True)\n// hdpe_dep_cost = models.FloatField(default=0, blank=True, null=True)\n\nexport const formListSolutionProposalCreateCPFormFields = [\n  {\n    key: 'specification',\n    kwargs: {\n      placeholder: 'Specification',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Specification',\n  },\n  {\n    key: 'quantity',\n    kwargs: {\n      placeholder: 'Total KIT Quantity',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Total KIT Quantity',\n  },\n  {\n    key: 'quantity_per_kit',\n    kwargs: {\n      placeholder: 'Qyt/KIT',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Qyt/KIT',\n  },\n  {\n    key: 'rate',\n    kwargs: {\n      placeholder: 'Rate',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Rate',\n  },\n  {\n    key: 'tot_mat_req',\n    kwargs: {\n      placeholder: 'Total Material Req',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Mat. Req.',\n  },\n  {\n    key: 'total_cost',\n    kwargs: {\n      placeholder: 'Total Cost',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Total Cost',\n  },\n  {\n    key: 'month',\n    kwargs: {\n      placeholder: 'Month',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Month',\n  },\n  {\n    key: 'dep_cost',\n    kwargs: {\n      placeholder: 'Dep Cost',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Dep Cost',\n  },\n];\n\nexport const stdAssetsProposalCreateCPFormFields = [\n  {\n    key: '_quantity',\n    kwargs: {\n      placeholder: 'Quantity',\n      type: 'number',\n      disabled: true,\n    },\n    others: {\n      formOptions: {noStyle: true},\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Kit Qty',\n  },\n  {\n    key: '_quantity_perkit',\n    kwargs: {\n      placeholder: 'Quantity/Kit',\n      type: 'number',\n    },\n    others: {\n      formOptions: {noStyle: true},\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Quantity/Kit',\n  },\n  {\n    key: '_rate',\n    kwargs: {\n      placeholder: 'Rate',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: {noStyle: true},\n    },\n    customLabel: 'Rate',\n  },\n  {\n    key: '_tot_mat_req',\n    kwargs: {\n      placeholder: 'Total Mat. Req.',\n      disabled: true,\n    },\n    others: {\n      formOptions: {noStyle: true},\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Mat. Req.',\n  },\n  {\n    key: '_total_cost',\n    kwargs: {\n      placeholder: 'Total Cost',\n      type: 'number',\n      disabled: true,\n    },\n    others: {\n      formOptions: {noStyle: true},\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Cost',\n  },\n  {\n    key: '_month',\n    kwargs: {\n      placeholder: 'Month',\n      type: 'number',\n      min: 0,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: {noStyle: true},\n    },\n    customLabel: 'Month',\n  },\n  {\n    key: '_dep_cost',\n    kwargs: {\n      placeholder: 'Dep Cost',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: {noStyle: true},\n    },\n    customLabel: 'Dep Cost',\n  },\n];\n\nexport const createFields = (arr) => {\n  let fields = [];\n  arr.map((key) => {\n    fields = [\n      ...fields,\n      ...stdAssetsProposalCreateCPFormFields.map((item) => ({\n        ...item,\n        key: `${key}${item.key}`,\n      })),\n    ];\n    return null;\n  });\n  return fields;\n};\n","import {createFields} from 'common/formFields/createCP/solutionProposalCreateCP.formFields';\n\nexport const solutionAssetOptions = [\n  'FLC',\n  'FSC',\n  'CRT6412',\n  'CRT6418',\n  'CRT6423',\n  'CRT6435',\n  'Palletized CRT6412',\n  'Palletized CRT6418',\n  'Palletized CRT6423',\n  'Palletized CRT6435',\n  'PP Box',\n  'Palletized PP Box',\n  'Plastic Pallet',\n  'Wooden Pallet',\n];\n\nexport const getSolutionProposal = (record) => {\n  if (\n    record.standard_assets === 'FLC' ||\n    record.standard_assets === 'FSC' ||\n    record.standard_assets === 'PP Box'\n  ) {\n    return {\n      [record.standard_assets]: record.std_ast_quantity_perkit,\n    };\n  }\n  if (\n    record.standard_assets === 'CRT6412' ||\n    record.standard_assets === 'CRT6418' ||\n    record.standard_assets === 'CRT6423' ||\n    record.standard_assets === 'CRT6435'\n  ) {\n    return {\n      [record.standard_assets]: record.crate_lid_quantity_perkit,\n    };\n  }\n  if (\n    record.standard_assets === 'Palletized CRT6412' ||\n    record.standard_assets === 'Palletized CRT6418' ||\n    record.standard_assets === 'Palletized CRT6423' ||\n    record.standard_assets === 'Palletized CRT6435' ||\n    record.standard_assets === 'Palletized PP Box' ||\n    record.standard_assets === 'Plastic Pallet' ||\n    record.standard_assets === 'Wooden Pallet'\n  ) {\n    return {\n      Lid: 1,\n      Pallet: 1,\n      [record.standard_assets]: record.palletized_lid_quantity_perkit,\n    };\n  }\n\n  return {};\n};\n\nexport const insertTypeOptions = ['Insert', 'HDPE Tray'];\n\nexport const getLabels = (type, insertType) => {\n  const specifications = {\n    FLC:\n      insertType === 'Insert'\n        ? ['FLC', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['FLC', 'Separator Sheet', 'Mould', 'HDPE'],\n    FSC:\n      insertType === 'Insert'\n        ? ['FSC', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['FSC', 'Separator Sheet', 'Mould', 'HDPE'],\n    CRT6412:\n      insertType === 'Insert'\n        ? ['CRT6412', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['CRT6412', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\n    CRT6418:\n      insertType === 'Insert'\n        ? ['CRT6418', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['CRT6418', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\n    CRT6423:\n      insertType === 'Insert'\n        ? ['CRT6423', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['CRT6423', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\n    CRT6435:\n      insertType === 'Insert'\n        ? ['CRT6435', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['CRT6435', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\n    'Palletized CRT6412':\n      insertType === 'Insert'\n        ? [\n            'Palletized CRT6412',\n            'Palletized Lid',\n            'Pallet',\n            'Insert Type 1',\n            'Insert Type 2',\n            'Separator Sheet',\n          ]\n        : ['Palletized CRT6412', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\n    'Palletized CRT6418':\n      insertType === 'Insert'\n        ? [\n            'Palletized CRT6418',\n            'Palletized Lid',\n            'Pallet',\n            'Insert Type 1',\n            'Insert Type 2',\n            'Separator Sheet',\n          ]\n        : ['Palletized CRT6418', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\n    'Palletized CRT6423':\n      insertType === 'Insert'\n        ? [\n            'Palletized CRT6423',\n            'Palletized Lid',\n            'Pallet',\n            'Insert Type 1',\n            'Insert Type 2',\n            'Separator Sheet',\n          ]\n        : ['Palletized CRT6423', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\n    'Palletized CRT6435':\n      insertType === 'Insert'\n        ? [\n            'Palletized CRT6435',\n            'Palletized Lid',\n            'Pallet',\n            'Insert Type 1',\n            'Insert Type 2',\n            'Separator Sheet',\n          ]\n        : ['Palletized CRT6435', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\n    'PP Box': ['PP Box'],\n    'Palletized PP Box': ['Palletized PP Box', 'Palletized Lid', 'Pallet'],\n    'Plastic Pallet': ['Plastic Pallet', 'Palletized Lid'],\n    'Wooden Pallet': ['Wooden Pallet', 'Palletized Lid'],\n  };\n  return specifications[type];\n};\n\nexport const getFields = (type, insertType) => {\n  const specifications = {\n    FLC:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'sep_sheet', 'mould', 'hdpe']),\n    FSC:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'sep_sheet', 'mould', 'hdpe']),\n    CRT6412:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\n    CRT6418:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\n    CRT6423:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\n    CRT6435:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\n    'Palletized CRT6412':\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\n    'Palletized CRT6418':\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\n    'Palletized CRT6423':\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\n    'Palletized CRT6435':\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\n    'PP Box': insertType === 'Insert' ? createFields(['std_ast']) : createFields(['std_ast']),\n    'Palletized PP Box': createFields(['std_ast', 'palletized_lid', 'pallet']),\n    'Plastic Pallet': createFields(['std_ast', 'palletized_lid']),\n    'Wooden Pallet': createFields(['std_ast', 'palletized_lid']),\n  };\n  return specifications[type];\n};\n\nexport const formatStr = (str, typeStr) => {\n  return `${str}_${typeStr}`;\n};\n\nexport const getFieldsByColumn = (type, insertType, typeStr) => {\n  const specifications = {\n    FLC:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    FSC:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    CRT6412:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    CRT6418:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    CRT6423:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    CRT6435:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    'Palletized CRT6412':\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    'Palletized CRT6418':\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    'Palletized CRT6423':\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    'Palletized CRT6435':\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    'PP Box':\n      insertType === 'Insert' ? [formatStr('std_ast', typeStr)] : [formatStr('std_ast', typeStr)],\n    'Palletized PP Box': [\n      formatStr('std_ast', typeStr),\n      formatStr('palletized_lid', typeStr),\n      formatStr('pallet', typeStr),\n    ],\n    'Plastic Pallet': [formatStr('std_ast', typeStr), formatStr('palletized_lid', typeStr)],\n    'Wooden Pallet': [formatStr('std_ast', typeStr), formatStr('palletized_lid', typeStr)],\n  };\n  return specifications[type];\n};\n\nexport const getDefaultMonthValue = (type) => {\n  switch (type) {\n    case 'std_ast':\n      return 18;\n    case 'crate_lid':\n      return 12;\n    case 'palletized_lid':\n      return 12;\n    case 'insert1':\n      return 12;\n    case 'insert2':\n      return 12;\n    case 'sep_sheet':\n      return 12;\n    case 'mould':\n      return 18;\n    case 'hdpe':\n      return 12;\n    default:\n      return 0;\n  }\n};\n","import React, {useEffect, useState, useCallback} from 'react';\nimport {Form, Col, Row, Button, Divider, Spin, Tag} from 'antd';\nimport formItem from 'hocs/formItem.hoc';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {ArrowRightOutlined} from '@ant-design/icons';\nimport {ADD_CREATE_CP_DATA, STOP_STEP_LOADING} from 'common/actions';\nimport {solutionProposalCreateCPFormFields} from 'common/formFields/createCP/solutionProposalCreateCP.formFields';\nimport {\n  getFields,\n  getLabels,\n  getFieldsByColumn,\n  getDefaultMonthValue,\n} from 'common/constants/solutionproposalCreateCP';\nimport {ifNanReturnZeroFloat, numberWithCommas} from 'common/helpers/mrHelper';\n\nimport _ from 'lodash';\n\nexport const SolutionProposalCreateCPForm = ({id, onCancel, lead, onNext, active}) => {\n  const [loading, setLoading] = useState(false);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const state = useSelector((e) => e.data.createCPData);\n  const [fields, setFields] = useState(\n    getFields(state.standard_assets || 'FLC', state.insert_type || 'Insert'),\n  );\n  const [labels, setLabels] = useState(\n    getLabels(state.standard_assets || 'FLC', state.insert_type || 'Insert'),\n  );\n  const submit = async (data) => {\n    setLoading(true);\n    await dispatch({type: ADD_CREATE_CP_DATA, data: {...data}});\n    setLoading(false);\n    if (active === 1) {\n      onNext();\n    }\n  };\n\n  const [totalCostPerKit, setTotalCostPerKit] = useState(0);\n  const [projectCost, setProjectCost] = useState(0);\n  const [directCost, setDirectCost] = useState(0);\n\n  const updateCostPerKit = useCallback(() => {\n    let q = [];\n    let r = [];\n    const qtyPerKitCols = getFieldsByColumn(\n      form.getFieldValue('standard_assets'),\n      form.getFieldValue('insert_type'),\n      'quantity_perkit',\n    );\n    const rateCols = getFieldsByColumn(\n      form.getFieldValue('standard_assets'),\n      form.getFieldValue('insert_type'),\n      'rate',\n    );\n    qtyPerKitCols.forEach((i) => {\n      q.push(ifNanReturnZeroFloat(form.getFieldValue(i)));\n    });\n    rateCols.forEach((i) => {\n      r.push(ifNanReturnZeroFloat(form.getFieldValue(i)));\n    });\n    let sum = 0;\n    for (let i = 0; i < q.length; i++) {\n      sum += q[i] * r[i];\n    }\n    setTotalCostPerKit(_.round(sum, 2));\n  }, [form, totalCostPerKit, setTotalCostPerKit]);\n\n  const updateProjectCost = useCallback(() => {\n    const totalCostCols = getFieldsByColumn(\n      form.getFieldValue('standard_assets'),\n      form.getFieldValue('insert_type'),\n      'total_cost',\n    );\n    let temp = 0;\n    totalCostCols.forEach((i) => {\n      temp += ifNanReturnZeroFloat(form.getFieldValue(i));\n    });\n    setProjectCost(_.round(temp, 2));\n  }, [form, projectCost, setProjectCost]);\n\n  const updateDirectCost = useCallback(() => {\n    const depCostCols = getFieldsByColumn(\n      form.getFieldValue('standard_assets'),\n      form.getFieldValue('insert_type'),\n      'dep_cost',\n    );\n    let temp = 0;\n    depCostCols.forEach((i) => {\n      temp += ifNanReturnZeroFloat(form.getFieldValue(i));\n    });\n    // temp /= form.getFieldValue('kit_based_on_usage_ratio');\n    temp /= state.kit_based_on_usage_ratio;\n    setDirectCost(_.round(temp, 2));\n  }, [form, state, directCost, setDirectCost]);\n\n  // useEffect(() => {\n  // \tif (form.getFieldValue(\"standard_assets\") && form.getFieldValue(\"insert_type\")) {\n  // \t\tsetFields(getFields(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type')));\n  // \t\tsetLabels(getFields(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type')));\n  // \t}\n  // },[])\n\n  useEffect(() => {\n    if (active !== 1) {\n      form.submit();\n      dispatch({type: STOP_STEP_LOADING});\n    }\n  }, [active]);\n\n  const updateRemainingDisabledCols = useCallback(() => {\n    const totalKitQtysCols = getFieldsByColumn(\n      form.getFieldValue('standard_assets'),\n      form.getFieldValue('insert_type'),\n      'quantity',\n    );\n    const qtyPerKitCols = getFieldsByColumn(\n      form.getFieldValue('standard_assets'),\n      form.getFieldValue('insert_type'),\n      'quantity_perkit',\n    );\n    const rateCols = getFieldsByColumn(\n      form.getFieldValue('standard_assets'),\n      form.getFieldValue('insert_type'),\n      'rate',\n    );\n    const totalMatReqCols = getFieldsByColumn(\n      form.getFieldValue('standard_assets'),\n      form.getFieldValue('insert_type'),\n      'tot_mat_req',\n    );\n    const totalCostCols = getFieldsByColumn(\n      form.getFieldValue('standard_assets'),\n      form.getFieldValue('insert_type'),\n      'total_cost',\n    );\n    const monthCols = getFieldsByColumn(\n      form.getFieldValue('standard_assets'),\n      form.getFieldValue('insert_type'),\n      'month',\n    );\n    const depCostCols = getFieldsByColumn(\n      form.getFieldValue('standard_assets'),\n      form.getFieldValue('insert_type'),\n      'dep_cost',\n    );\n\n    qtyPerKitCols.forEach((i, idx) => {\n      if (form.getFieldValue(totalKitQtysCols[idx]) && form.getFieldValue(qtyPerKitCols[idx])) {\n        const totalMatReqVal =\n          form.getFieldValue(totalKitQtysCols[idx]) * form.getFieldValue(qtyPerKitCols[idx]);\n        form.setFieldsValue({\n          [totalMatReqCols[idx]]: totalMatReqVal,\n          [totalCostCols[idx]]: form.getFieldValue(rateCols[idx]) * totalMatReqVal,\n        });\n      } else {\n        form.setFieldsValue({\n          [totalMatReqCols[idx]]: 0,\n          [totalCostCols[idx]]: 0,\n        });\n      }\n\n      if (\n        form.getFieldValue(totalCostCols[idx]) &&\n        form.getFieldValue(monthCols[idx]) &&\n        form.getFieldValue('yantra_cycle')\n      ) {\n        form.setFieldsValue({\n          [depCostCols[idx]]: _.round(\n            (form.getFieldValue(totalCostCols[idx]) / form.getFieldValue(monthCols[idx]) / 30) *\n              form.getFieldValue('yantra_cycle'),\n            2,\n          ),\n        });\n      } else {\n        form.setFieldsValue({\n          [depCostCols[idx]]: 0,\n        });\n      }\n    });\n  }, [form]);\n\n  const updateTotalKitQtysCols = useCallback(() => {\n    if (state.kit_based_on_usage_ratio) {\n      const totalKitQtysCols = getFieldsByColumn(\n        form.getFieldValue('standard_assets'),\n        form.getFieldValue('insert_type'),\n        'quantity',\n      );\n      let temp = {};\n      totalKitQtysCols.forEach((i) => {\n        if (i !== 'mould_quantity') {\n          form.setFieldsValue({\n            [i]: state.kit_based_on_usage_ratio,\n          });\n        } else {\n          form.setFieldsValue({\n            mould_quantity: 1,\n          });\n        }\n      });\n      form.setFieldsValue({...temp});\n      updateRemainingDisabledCols();\n    }\n  }, [form, state]);\n\n  const updateMonthCols = useCallback(() => {\n    const monthCols = getFieldsByColumn(\n      form.getFieldValue('standard_assets'),\n      form.getFieldValue('insert_type'),\n      'month',\n    );\n    monthCols.forEach((i) => {\n      if (!form.getFieldValue(i)) {\n        form.setFieldsValue({\n          [i]: getDefaultMonthValue(i.slice(0, -6)),\n        });\n      }\n    });\n  }, [form]);\n\n  useEffect(() => {\n    updateTotalKitQtysCols();\n    updateMonthCols();\n    updateCostPerKit();\n    updateProjectCost();\n    updateDirectCost();\n  }, [form]);\n\n  const handleFieldsChange = useCallback(\n    (data) => {\n      if (data[0]) {\n        if (data[0].name) {\n          const currentInputField = data[0].name[0];\n          console.log(currentInputField);\n\n          if (currentInputField === 'standard_assets' || currentInputField === 'insert_type') {\n            setFields(\n              getFields(form.getFieldValue('standard_assets'), form.getFieldValue('insert_type')),\n            );\n            setLabels(\n              getLabels(form.getFieldValue('standard_assets'), form.getFieldValue('insert_type')),\n            );\n            updateTotalKitQtysCols();\n            updateMonthCols();\n          } else {\n            const totalKitQtysCols = getFieldsByColumn(\n              form.getFieldValue('standard_assets'),\n              form.getFieldValue('insert_type'),\n              'quantity',\n            );\n            const qtyPerKitCols = getFieldsByColumn(\n              form.getFieldValue('standard_assets'),\n              form.getFieldValue('insert_type'),\n              'quantity_perkit',\n            );\n            const rateCols = getFieldsByColumn(\n              form.getFieldValue('standard_assets'),\n              form.getFieldValue('insert_type'),\n              'rate',\n            );\n            const totalMatReqCols = getFieldsByColumn(\n              form.getFieldValue('standard_assets'),\n              form.getFieldValue('insert_type'),\n              'tot_mat_req',\n            );\n            const totalCostCols = getFieldsByColumn(\n              form.getFieldValue('standard_assets'),\n              form.getFieldValue('insert_type'),\n              'total_cost',\n            );\n            const monthCols = getFieldsByColumn(\n              form.getFieldValue('standard_assets'),\n              form.getFieldValue('insert_type'),\n              'month',\n            );\n            const depCostCols = getFieldsByColumn(\n              form.getFieldValue('standard_assets'),\n              form.getFieldValue('insert_type'),\n              'dep_cost',\n            );\n\n            qtyPerKitCols.forEach((i, idx) => {\n              if (\n                currentInputField === totalKitQtysCols[idx] ||\n                currentInputField === qtyPerKitCols[idx] ||\n                currentInputField === rateCols[idx] ||\n                currentInputField === totalMatReqCols[idx] ||\n                currentInputField === totalCostCols[idx] ||\n                currentInputField === monthCols[idx] ||\n                currentInputField === depCostCols[idx]\n              ) {\n                if (\n                  form.getFieldValue(totalKitQtysCols[idx]) &&\n                  form.getFieldValue(qtyPerKitCols[idx])\n                ) {\n                  const totalMatReqVal =\n                    form.getFieldValue(totalKitQtysCols[idx]) *\n                    form.getFieldValue(qtyPerKitCols[idx]);\n                  form.setFieldsValue({\n                    [totalMatReqCols[idx]]: totalMatReqVal,\n                    [totalCostCols[idx]]: form.getFieldValue(rateCols[idx]) * totalMatReqVal,\n                  });\n                } else {\n                  form.setFieldsValue({\n                    [totalMatReqCols[idx]]: 0,\n                    [totalCostCols[idx]]: 0,\n                  });\n                }\n\n                if (\n                  form.getFieldValue(totalCostCols[idx]) &&\n                  form.getFieldValue(monthCols[idx]) &&\n                  form.getFieldValue('yantra_cycle')\n                ) {\n                  form.setFieldsValue({\n                    [depCostCols[idx]]: _.round(\n                      (form.getFieldValue(totalCostCols[idx]) /\n                        form.getFieldValue(monthCols[idx]) /\n                        30) *\n                        form.getFieldValue('yantra_cycle'),\n                      2,\n                    ),\n                  });\n                } else {\n                  form.setFieldsValue({\n                    [depCostCols[idx]]: 0,\n                  });\n                }\n              }\n            });\n          }\n          updateCostPerKit();\n          updateProjectCost();\n          updateDirectCost();\n        }\n      }\n    },\n    [form, fields, labels],\n  );\n\n  // const handleFieldsChange = (data) => {\n  //   if(data[0]){\n  //     if(data[0].name){\n  //       if(data[0].name[0]==='standard_assets') {\n  //         // console.log(getFields(data[0].value),form.getFieldValue('insert_type'),'Ggg')\n  //         setFields(getFields(data[0].value,form.getFieldValue('insert_type')))\n  //         setLabels(getLabels(form.getFieldValue('standard_assets'),data[0].value))\n  //       }\n  //       if(data[0].name[0]==='insert_type') {\n  //         // console.log(form.getFieldValue('standard_assets'),getFields(data[0].value),'Ggg')\n  //         setFields(getFields(form.getFieldValue('standard_assets'),data[0].value))\n  //         setLabels(getLabels(form.getFieldValue('standard_assets'),data[0].value))\n  //       }}}\n  // }\n\n  return (\n    <Spin spinning={loading}>\n      <Form\n        initialValues={{\n          ...state,\n          insert_type: state.insert_type || 'Insert',\n          standard_assets: state.standard_assets || 'FLC',\n        }}\n        onFinish={submit}\n        form={form}\n        layout=\"vertical\"\n        // hideRequiredMark\n        onFieldsChange={handleFieldsChange}\n        autoComplete=\"off\">\n        <Divider orientation=\"left\">Capex</Divider>\n        <div className=\"row px-2\">\n          {state.solution_flc ? <Tag>FLC</Tag> : null}\n          {state.solution_fsc ? <Tag>FSC</Tag> : null}\n          {state.solution_crate ? <Tag>Crate</Tag> : null}\n          {state.solution_ppbox ? <Tag>PP Box</Tag> : null}\n          {state.solution_palletized_box ? <Tag>Solution Palletized Box</Tag> : null}\n          {state.solution_palletized_crate ? <Tag>Solution Palletized Crate</Tag> : null}\n          {state.solution_pp ? <Tag>Solution PP</Tag> : null}\n          {state.solution_stacking_nesting ? <Tag>Solution Stacking Nesting</Tag> : null}\n          {state.solution_wp ? <Tag>Solution WP</Tag> : null}\n        </div>\n        <Row style={{justifyContent: 'left'}}>\n          {solutionProposalCreateCPFormFields.map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className=\"p-2\">\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{justifyContent: 'left'}}>\n          <Col span={3}>\n            <div className=\"p-2 flex row justify-center\">\n              <b />\n            </div>\n          </Col>\n          {[...fields].slice(0, 7).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\n                <b>{item.customLabel}</b>\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{justifyContent: 'left'}}>\n          {labels.slice(0, 1).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(0, 7).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2\">\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{justifyContent: 'left'}}>\n          {labels.slice(1, 2).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(7, 14).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2\">\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{justifyContent: 'left'}}>\n          {labels.slice(2, 3).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(14, 21).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2\">\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{justifyContent: 'left'}}>\n          {labels.slice(3, 4).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(21, 28).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2\">\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{justifyContent: 'left'}}>\n          {labels.slice(4, 5).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(28, 35).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2\">\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{justifyContent: 'left'}}>\n          {labels.slice(5, 6).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(35, 42).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2\">\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{justifyContent: 'left'}}>\n          {labels.slice(6, 7).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2 flex row justify-center\">\n                <b>{item}</b>\n              </div>\n            </Col>\n          ))}\n          {[...fields].slice(42, 49).map((item, idx) => (\n            <Col span={3}>\n              <div key={idx.toString()} className=\"p-2\">\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row className=\"text-center\">\n          <Col span={3}></Col>\n          <Col span={3}></Col>\n          <Col span={3}></Col>\n          <Col span={3}>{`Total Cost/Kit: ${numberWithCommas(totalCostPerKit)}`}</Col>\n          <Col span={3}></Col>\n          <Col span={3}>{`Project Cost: ${numberWithCommas(projectCost)}`}</Col>\n          <Col span={3}></Col>\n          <Col span={3}>{`Direct Cost: ${numberWithCommas(directCost)}`}</Col>\n        </Row>\n        {/* <Form.List name='solutions'> */}\n        {/*  {(fields, { add, remove }) => { */}\n        {/*    return ( */}\n        {/*      <div> */}\n        {/*        {fields.map((field, index) => ( */}\n        {/*          <Row align='middle'> */}\n        {/*            {formListSolutionProposalCreateCPFormFields.slice(0,1).map((item) => ( */}\n        {/*              <Col span={4}> */}\n        {/*                <div className='p-2'> */}\n        {/*                  {formItem({ */}\n        {/*                    ...item, */}\n        {/*                    noLabel: index !== 0, */}\n        {/*                    form, */}\n        {/*                    others: { */}\n        {/*                      formOptions: { */}\n        {/*                        ...field, */}\n        {/*                        // hidden:true, */}\n        {/*                        name: [field.name, item.key], */}\n        {/*                        fieldKey: [field.fieldKey, item.key], */}\n        {/*                      }, */}\n        {/*                    }, */}\n        {/*                  })} */}\n        {/*                </div> */}\n        {/*              </Col> */}\n        {/*            ))} */}\n        {/*            {[...createFields('std_ast')].slice(1,7).map((item) => ( */}\n        {/*              <Col span={3}> */}\n        {/*                <div className='p-2'> */}\n        {/*                  {formItem({ */}\n        {/*                    ...item, */}\n        {/*                    noLabel: index !== 0, */}\n        {/*                    form, */}\n        {/*                    others: { */}\n        {/*                      formOptions: { */}\n        {/*                        ...field, */}\n        {/*                        name: [field.name, item.key], */}\n        {/*                        fieldKey: [field.fieldKey, item.key], */}\n        {/*                      }, */}\n        {/*                    }, */}\n        {/*                  })} */}\n        {/*                </div> */}\n        {/*              </Col> */}\n        {/*            ))} */}\n        {/*          </Row> */}\n        {/*        ))} */}\n        {/*      </div> */}\n        {/*    ); */}\n        {/*  }} */}\n        {/* </Form.List> */}\n        <Row justify=\"space-between\">\n          <div className=\"row\">\n            <Button type=\"primary\" htmlType=\"submit\" disabled>\n              Submit\n            </Button>\n            <div className=\"p-2\" />\n            <Button type=\"primary\" onClick={onCancel}>\n              Cancel\n            </Button>\n          </div>\n          <Button type=\"link\" htmlType=\"submit\">\n            <ArrowRightOutlined style={{fontSize: 30}} />\n          </Button>\n        </Row>\n      </Form>\n    </Spin>\n  );\n};\n\nexport default SolutionProposalCreateCPForm;\n"],"sourceRoot":""}