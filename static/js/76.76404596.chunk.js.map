{"version":3,"sources":["../../common/formFields/createCP/solutionProposalCreateCP.formFields.js","../../common/constants/solutionproposalCreateCP.js","../../common/formFields/createCP/operatingCostMonthly.formFields.js","forms/CreateCP/operatingCostMonthlyCreateCP.form.js"],"names":["solutionProposalCreateCPFormFields","key","type","FORM_ELEMENT_TYPES","SELECT","others","selectOptions","customLabel","stdAssetsProposalCreateCPFormFields","INPUT","kwargs","placeholder","disabled","formOptions","noStyle","min","createFields","arr","fields","map","item","getSolutionProposal","record","standard_assets","std_ast_quantity_perkit","crate_lid_quantity_perkit","Lid","Pallet","palletized_lid_quantity_perkit","getLabels","insertType","FLC","FSC","CRT6412","CRT6418","CRT6423","CRT6435","getFields","formatStr","str","typeStr","getFieldsByColumn","getDefaultMonthValue","operatingCostMonthlyFormFields","i","LogisticCreateCPForm","id","onCancel","onDone","active","onNext","useState","loading","setLoading","useForm","form","dispatch","useDispatch","state","useSelector","e","data","createCPData","submit","ADD_CREATE_CP_DATA","editCP","error","notification","warning","message","description","createCP","success","useEffect","STOP_STEP_LOADING","updateDirectCost","useCallback","getFieldValue","directCost","forEach","setFieldsValue","_","round","updateOperatingCost","updateContingencyMargin","updateMinCostToBillForATrip","updatePriceShouldBeBilled","updateMarginAgreedForThisFlow","updateGrossMargins","handleFieldsChange","name","spinning","orientation","onFinish","initialValues","layout","onFieldsChange","autoComplete","style","justifyContent","slice","idx","span","toString","className","formItem","justify","htmlType","onClick"],"mappings":"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","file":"static/js/76.76404596.chunk.js","sourcesContent":["import {FORM_ELEMENT_TYPES} from 'web/src/constants/formFields.constant';\n\nconst solutionAssetOptions = [\n  'FLC',\n  'FSC',\n  'CRT6412',\n  'CRT6418',\n  'CRT6423',\n  'CRT6435',\n  'Palletized CRT6412',\n  'Palletized CRT6418',\n  'Palletized CRT6423',\n  'Palletized CRT6435',\n  'PP Box',\n  'Palletized PP Box',\n  'Plastic Pallet',\n  'Wooden Pallet',\n];\n\nexport const solutionProposalCreateCPFormFields = [\n  {\n    key: 'standard_assets',\n    type: FORM_ELEMENT_TYPES.SELECT,\n    others: {\n      selectOptions: solutionAssetOptions,\n    },\n    customLabel: 'Standard Assets',\n  },\n  {\n    key: 'insert_type',\n    type: FORM_ELEMENT_TYPES.SELECT,\n    others: {\n      selectOptions: ['Insert', 'HDPE Tray'],\n    },\n    customLabel: 'Insert Type',\n  },\n  // {\n  //   key: 'cost',\n  //   type: FORM_ELEMENT_TYPES.INPUT,\n  //   kwargs: {\n  //     placeholder: 'Cost',\n  //     type:'number'\n  //   },\n  //   customLabel:'Cost'\n  // },\n];\n\n// Specification\tQuantity\tQyt/KIT\tRate\tTotal Cost\tMonth\tDep Cost\n\n// std_ast_quantity = models.FloatField(default=0, blank=True, null=True)\n// std_ast_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// std_ast_rate = models.FloatField(default=0, blank=True, null=True)\n// std_ast_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// std_ast_total_cost = models.FloatField(default=0, blank=True, null=True)\n// std_ast_month = models.FloatField(default=0, blank=True, null=True)\n// std_ast_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// crate_lid_quantity = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_rate = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_month = models.FloatField(default=0, blank=True, null=True)\n// crate_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// palletized_lid_quantity = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_rate = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_total_cost = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_month = models.FloatField(default=0, blank=True, null=True)\n// palletized_lid_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// pallet_quantity = models.FloatField(default=0, blank=True, null=True)\n// pallet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// pallet_rate = models.FloatField(default=0, blank=True, null=True)\n// pallet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// pallet_total_cost = models.FloatField(default=0, blank=True, null=True)\n// pallet_month = models.FloatField(default=0, blank=True, null=True)\n// pallet_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// insert1_quantity = models.FloatField(default=0, blank=True, null=True)\n// insert1_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// insert1_rate = models.FloatField(default=0, blank=True, null=True)\n// insert1_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// insert1_total_cost = models.FloatField(default=0, blank=True, null=True)\n// insert1_month = models.FloatField(default=0, blank=True, null=True)\n// insert1_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// insert2_quantity = models.FloatField(default=0, blank=True, null=True)\n// insert2_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// insert2_rate = models.FloatField(default=0, blank=True, null=True)\n// insert2_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// insert2_total_cost = models.FloatField(default=0, blank=True, null=True)\n// insert2_month = models.FloatField(default=0, blank=True, null=True)\n// insert2_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// sep_sheet_quantity = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_rate = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_total_cost = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_month = models.FloatField(default=0, blank=True, null=True)\n// sep_sheet_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// mould_quantity = models.FloatField(default=0, blank=True, null=True)\n// mould_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// mould_rate = models.FloatField(default=0, blank=True, null=True)\n// mould_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// mould_total_cost = models.FloatField(default=0, blank=True, null=True)\n// mould_month = models.FloatField(default=0, blank=True, null=True)\n// mould_dep_cost = models.FloatField(default=0, blank=True, null=True)\n//\n// hdpe_quantity = models.FloatField(default=0, blank=True, null=True)\n// hdpe_quantity_perkit = models.FloatField(default=0, blank=True, null=True)\n// hdpe_rate = models.FloatField(default=0, blank=True, null=True)\n// hdpe_tot_mat_req = models.FloatField(default=0, blank=True, null=True)\n// hdpe_total_cost = models.FloatField(default=0, blank=True, null=True)\n// hdpe_month = models.FloatField(default=0, blank=True, null=True)\n// hdpe_dep_cost = models.FloatField(default=0, blank=True, null=True)\n\nexport const formListSolutionProposalCreateCPFormFields = [\n  {\n    key: 'specification',\n    kwargs: {\n      placeholder: 'Specification',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Specification',\n  },\n  {\n    key: 'quantity',\n    kwargs: {\n      placeholder: 'Total KIT Quantity',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Total KIT Quantity',\n  },\n  {\n    key: 'quantity_per_kit',\n    kwargs: {\n      placeholder: 'Qyt/KIT',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Qyt/KIT',\n  },\n  {\n    key: 'rate',\n    kwargs: {\n      placeholder: 'Rate',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Rate',\n  },\n  {\n    key: 'tot_mat_req',\n    kwargs: {\n      placeholder: 'Total Material Req',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Mat. Req.',\n  },\n  {\n    key: 'total_cost',\n    kwargs: {\n      placeholder: 'Total Cost',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Total Cost',\n  },\n  {\n    key: 'month',\n    kwargs: {\n      placeholder: 'Month',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Month',\n  },\n  {\n    key: 'dep_cost',\n    kwargs: {\n      placeholder: 'Dep Cost',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: null,\n    customLabel: 'Dep Cost',\n  },\n];\n\nexport const stdAssetsProposalCreateCPFormFields = [\n  {\n    key: '_quantity',\n    kwargs: {\n      placeholder: 'Quantity',\n      type: 'number',\n      disabled: true,\n    },\n    others: {\n      formOptions: {noStyle: true},\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Kit Qty',\n  },\n  {\n    key: '_quantity_perkit',\n    kwargs: {\n      placeholder: 'Quantity/Kit',\n      type: 'number',\n    },\n    others: {\n      formOptions: {noStyle: true},\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Quantity/Kit',\n  },\n  {\n    key: '_rate',\n    kwargs: {\n      placeholder: 'Rate',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: {noStyle: true},\n    },\n    customLabel: 'Rate',\n  },\n  {\n    key: '_tot_mat_req',\n    kwargs: {\n      placeholder: 'Total Mat. Req.',\n      disabled: true,\n    },\n    others: {\n      formOptions: {noStyle: true},\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Mat. Req.',\n  },\n  {\n    key: '_total_cost',\n    kwargs: {\n      placeholder: 'Total Cost',\n      type: 'number',\n      disabled: true,\n    },\n    others: {\n      formOptions: {noStyle: true},\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    customLabel: 'Total Cost',\n  },\n  {\n    key: '_month',\n    kwargs: {\n      placeholder: 'Month',\n      type: 'number',\n      min: 0,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: {noStyle: true},\n    },\n    customLabel: 'Month',\n  },\n  {\n    key: '_dep_cost',\n    kwargs: {\n      placeholder: 'Dep Cost',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: {noStyle: true},\n    },\n    customLabel: 'Dep Cost',\n  },\n];\n\nexport const createFields = (arr) => {\n  let fields = [];\n  arr.map((key) => {\n    fields = [\n      ...fields,\n      ...stdAssetsProposalCreateCPFormFields.map((item) => ({\n        ...item,\n        key: `${key}${item.key}`,\n      })),\n    ];\n    return null;\n  });\n  return fields;\n};\n","import {createFields} from 'common/formFields/createCP/solutionProposalCreateCP.formFields';\n\nexport const solutionAssetOptions = [\n  'FLC',\n  'FSC',\n  'CRT6412',\n  'CRT6418',\n  'CRT6423',\n  'CRT6435',\n  'Palletized CRT6412',\n  'Palletized CRT6418',\n  'Palletized CRT6423',\n  'Palletized CRT6435',\n  'PP Box',\n  'Palletized PP Box',\n  'Plastic Pallet',\n  'Wooden Pallet',\n];\n\nexport const getSolutionProposal = (record) => {\n  if (\n    record.standard_assets === 'FLC' ||\n    record.standard_assets === 'FSC' ||\n    record.standard_assets === 'PP Box'\n  ) {\n    return {\n      [record.standard_assets]: record.std_ast_quantity_perkit,\n    };\n  }\n  if (\n    record.standard_assets === 'CRT6412' ||\n    record.standard_assets === 'CRT6418' ||\n    record.standard_assets === 'CRT6423' ||\n    record.standard_assets === 'CRT6435'\n  ) {\n    return {\n      [record.standard_assets]: record.crate_lid_quantity_perkit,\n    };\n  }\n  if (\n    record.standard_assets === 'Palletized CRT6412' ||\n    record.standard_assets === 'Palletized CRT6418' ||\n    record.standard_assets === 'Palletized CRT6423' ||\n    record.standard_assets === 'Palletized CRT6435' ||\n    record.standard_assets === 'Palletized PP Box' ||\n    record.standard_assets === 'Plastic Pallet' ||\n    record.standard_assets === 'Wooden Pallet'\n  ) {\n    return {\n      Lid: 1,\n      Pallet: 1,\n      [record.standard_assets]: record.palletized_lid_quantity_perkit,\n    };\n  }\n\n  return {};\n};\n\nexport const insertTypeOptions = ['Insert', 'HDPE Tray'];\n\nexport const getLabels = (type, insertType) => {\n  const specifications = {\n    FLC:\n      insertType === 'Insert'\n        ? ['FLC', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['FLC', 'Separator Sheet', 'Mould', 'HDPE'],\n    FSC:\n      insertType === 'Insert'\n        ? ['FSC', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['FSC', 'Separator Sheet', 'Mould', 'HDPE'],\n    CRT6412:\n      insertType === 'Insert'\n        ? ['CRT6412', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['CRT6412', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\n    CRT6418:\n      insertType === 'Insert'\n        ? ['CRT6418', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['CRT6418', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\n    CRT6423:\n      insertType === 'Insert'\n        ? ['CRT6423', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['CRT6423', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\n    CRT6435:\n      insertType === 'Insert'\n        ? ['CRT6435', 'Crate Lid', 'Insert Type 1', 'Insert Type 2', 'Separator Sheet']\n        : ['CRT6435', 'Crate Lid', 'Separator Sheet', 'Mould', 'HDPE'],\n    'Palletized CRT6412':\n      insertType === 'Insert'\n        ? [\n            'Palletized CRT6412',\n            'Palletized Lid',\n            'Pallet',\n            'Insert Type 1',\n            'Insert Type 2',\n            'Separator Sheet',\n          ]\n        : ['Palletized CRT6412', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\n    'Palletized CRT6418':\n      insertType === 'Insert'\n        ? [\n            'Palletized CRT6418',\n            'Palletized Lid',\n            'Pallet',\n            'Insert Type 1',\n            'Insert Type 2',\n            'Separator Sheet',\n          ]\n        : ['Palletized CRT6418', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\n    'Palletized CRT6423':\n      insertType === 'Insert'\n        ? [\n            'Palletized CRT6423',\n            'Palletized Lid',\n            'Pallet',\n            'Insert Type 1',\n            'Insert Type 2',\n            'Separator Sheet',\n          ]\n        : ['Palletized CRT6423', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\n    'Palletized CRT6435':\n      insertType === 'Insert'\n        ? [\n            'Palletized CRT6435',\n            'Palletized Lid',\n            'Pallet',\n            'Insert Type 1',\n            'Insert Type 2',\n            'Separator Sheet',\n          ]\n        : ['Palletized CRT6435', 'Palletized Lid', 'Pallet', 'Separator Sheet', 'Mould', 'HDPE'],\n    'PP Box': ['PP Box'],\n    'Palletized PP Box': ['Palletized PP Box', 'Palletized Lid', 'Pallet'],\n    'Plastic Pallet': ['Plastic Pallet', 'Palletized Lid'],\n    'Wooden Pallet': ['Wooden Pallet', 'Palletized Lid'],\n  };\n  return specifications[type];\n};\n\nexport const getFields = (type, insertType) => {\n  const specifications = {\n    FLC:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'sep_sheet', 'mould', 'hdpe']),\n    FSC:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'sep_sheet', 'mould', 'hdpe']),\n    CRT6412:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\n    CRT6418:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\n    CRT6423:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\n    CRT6435:\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'crate_lid', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'crate_lid', 'sep_sheet', 'mould', 'hdpe']),\n    'Palletized CRT6412':\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\n    'Palletized CRT6418':\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\n    'Palletized CRT6423':\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\n    'Palletized CRT6435':\n      insertType === 'Insert'\n        ? createFields(['std_ast', 'palletized_lid', 'pallet', 'insert1', 'insert2', 'sep_sheet'])\n        : createFields(['std_ast', 'palletized_lid', 'pallet', 'sep_sheet', 'mould', 'hdpe']),\n    'PP Box': insertType === 'Insert' ? createFields(['std_ast']) : createFields(['std_ast']),\n    'Palletized PP Box': createFields(['std_ast', 'palletized_lid', 'pallet']),\n    'Plastic Pallet': createFields(['std_ast', 'palletized_lid']),\n    'Wooden Pallet': createFields(['std_ast', 'palletized_lid']),\n  };\n  return specifications[type];\n};\n\nexport const formatStr = (str, typeStr) => {\n  return `${str}_${typeStr}`;\n};\n\nexport const getFieldsByColumn = (type, insertType, typeStr) => {\n  const specifications = {\n    FLC:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    FSC:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    CRT6412:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    CRT6418:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    CRT6423:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    CRT6435:\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('crate_lid', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    'Palletized CRT6412':\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    'Palletized CRT6418':\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    'Palletized CRT6423':\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    'Palletized CRT6435':\n      insertType === 'Insert'\n        ? [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('insert1', typeStr),\n            formatStr('insert2', typeStr),\n            formatStr('sep_sheet', typeStr),\n          ]\n        : [\n            formatStr('std_ast', typeStr),\n            formatStr('palletized_lid', typeStr),\n            formatStr('pallet', typeStr),\n            formatStr('sep_sheet', typeStr),\n            formatStr('mould', typeStr),\n            formatStr('hdpe', typeStr),\n          ],\n    'PP Box':\n      insertType === 'Insert' ? [formatStr('std_ast', typeStr)] : [formatStr('std_ast', typeStr)],\n    'Palletized PP Box': [\n      formatStr('std_ast', typeStr),\n      formatStr('palletized_lid', typeStr),\n      formatStr('pallet', typeStr),\n    ],\n    'Plastic Pallet': [formatStr('std_ast', typeStr), formatStr('palletized_lid', typeStr)],\n    'Wooden Pallet': [formatStr('std_ast', typeStr), formatStr('palletized_lid', typeStr)],\n  };\n  return specifications[type];\n};\n\nexport const getDefaultMonthValue = (type) => {\n  switch (type) {\n    case 'std_ast':\n      return 18;\n    case 'crate_lid':\n      return 12;\n    case 'palletized_lid':\n      return 12;\n    case 'insert1':\n      return 12;\n    case 'insert2':\n      return 12;\n    case 'sep_sheet':\n      return 12;\n    case 'mould':\n      return 18;\n    case 'hdpe':\n      return 12;\n    default:\n      return 0;\n  }\n};\n","import { FORM_ELEMENT_TYPES } from 'web/src/constants/formFields.constant';\n\n\nexport const operatingCostMonthlyFormFields = [\n  {\n    key: 'direct_cost',\n    kwargs: {\n      placeholder: 'Direct Cost',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true, },\n    },\n    customLabel: 'Direct Cost',\n  },\n  {\n    key: 'operating_cost',\n    kwargs: {\n      placeholder: 'Operating Cost',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Operating Cost',\n  },\n  {\n    key: 'contigency_margin',\n    kwargs: {\n      placeholder: 'Contingency Margin',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Contingency Margin',\n  },\n  {\n    key: 'min_cost_for_trip',\n    kwargs: {\n      placeholder: 'Min cost to bill for a trip',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Min cost to bill for a trip',\n  },\n  {\n    key: 'billing_price',\n    kwargs: {\n      placeholder: 'Price should be billed @ 20% margin',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Price should be billed @ 20% margin',\n  },\n  {\n    key: 'agreed_margin',\n    kwargs: {\n      placeholder: 'Margin agreed for this flow',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Margin agreed for this flow (%)',\n  },\n  {\n    key: 'trip_cost',\n    kwargs: {\n      placeholder: 'TRIP COST (SALES)',\n      type: 'number',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'TRIP COST (SALES)',\n  },\n  {\n    key: 'gross_margins',\n    kwargs: {\n      placeholder: 'Gross Margins',\n      type: 'number',\n      disabled: true,\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Gross Margins (%)',\n  },\n  {\n    key: 'remarks',\n    kwargs: {\n      placeholder: 'Remarks',\n    },\n    type: FORM_ELEMENT_TYPES.INPUT,\n    others: {\n      formOptions: { noStyle: true },\n    }, customLabel: 'Remarks',\n  },\n];\n","import React, { useEffect, useState, useCallback } from 'react';\nimport { Form, Col, Row, Button, Divider, Spin, notification } from 'antd';\nimport formItem from 'hocs/formItem.hoc';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_CREATE_CP_DATA, STOP_STEP_LOADING } from 'common/actions';\nimport { operatingCostMonthlyFormFields } from 'common/formFields/createCP/operatingCostMonthly.formFields';\nimport { getFieldsByColumn, } from 'common/constants/solutionproposalCreateCP';\nimport { createCP, editCP } from 'common/api/auth';\n\nimport { ifNanReturnZero } from 'common/helpers/mrHelper';\nimport _ from 'lodash';\n\n\nexport const LogisticCreateCPForm = ({ id, onCancel,onDone,active,onNext }) => {\n  const [loading,setLoading] = useState(false);\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const state =  useSelector(e=>(e.data.createCPData))\n\n\n  const submit = async (data) =>{\n    setLoading(true)\n    console.log(data,'data to be submitted')\n    await dispatch({ type:ADD_CREATE_CP_DATA,data });\n    setLoading(false)\n    if(active === 3){\n      if(id){\n        const { error } = await editCP(id,{ ...state,...data });\n        if (error) {\n          notification.warning({\n            message: 'Unable To Edit.',\n            description:\n              'Something went wrong CP editing failed.',\n          });\n          onCancel();\n        } else {\n          onDone();\n        }\n      }\n      else{\n        const { error } = await createCP({ ...state,...data });\n        if (error) {\n          notification.warning({\n            message: 'Unable To Create.',\n            description:\n              'Something went wrong CP creation failed.',\n          });\n          onCancel();\n        } else {\n          onDone();\n          notification.success({\n            message: 'CP Created/Edited Successfully.',\n          });\n        }\n      }\n    }}\n\n  useEffect( ()=>{\n    if(active!==3){\n      form.submit()\n      dispatch({ type:STOP_STEP_LOADING })\n    }\n  },[active])\n\n  const updateDirectCost = useCallback(() => {\n    if (form.getFieldValue('standard_assets') && form.getFieldValue('insert_type') && form.getFieldValue(\"kit_based_on_usage_ratio\")) {\n      let directCost = 0;\n      const depCostCols = getFieldsByColumn(form.getFieldValue('standard_assets'),form.getFieldValue('insert_type'),'dep_cost');\n      console.log(depCostCols,'depCostCols')\n      depCostCols.forEach((i) => {\n        console.log(form.getFieldValue(i),i);\n        directCost += form.getFieldValue(i);\n      })\n      console.log(directCost,'directCost')\n      directCost /=form.getFieldValue(\"kit_based_on_usage_ratio\");\n      console.log(directCost,'again dC')\n      form.setFieldsValue({\n        \"direct_cost\" : _.round(directCost,2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"direct_cost\" : 0,\n      })\n    }\n  },[form])\n\n  const updateOperatingCost = useCallback(() => {\n    if (form.getFieldValue(\"total_cost\")) {\n      form.setFieldsValue({\n        \"operating_cost\" : _.round(form.getFieldValue(\"total_cost\"),2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"operating_cost\" : 0,\n      })\n    }\n  },[form])\n\n  const updateContingencyMargin = useCallback(() => {\n    if (form.getFieldValue(\"operating_cost\") && form.getFieldValue(\"direct_cost\")) {\n      form.setFieldsValue({\n        \"contigency_margin\" : _.round((form.getFieldValue(\"operating_cost\")+form.getFieldValue(\"direct_cost\"))*0.02,2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"contigency_margin\" : 0,\n      })\n    }\n  },[form])\n\n  const updateMinCostToBillForATrip = useCallback(() => {\n    if (form.getFieldValue(\"operating_cost\") && form.getFieldValue(\"direct_cost\") && form.getFieldValue(\"contigency_margin\")) {\n      form.setFieldsValue({\n        \"min_cost_for_trip\" : _.round(form.getFieldValue(\"operating_cost\")+form.getFieldValue(\"direct_cost\")+form.getFieldValue(\"contigency_margin\"),2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"min_cost_for_trip\" : 0,\n      })\n    }\n  },[form])\n\n  const updatePriceShouldBeBilled = useCallback(() => {\n    if (form.getFieldValue(\"min_cost_for_trip\")) {\n      form.setFieldsValue({\n        \"billing_price\" : _.round(form.getFieldValue(\"min_cost_for_trip\")/0.8,2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"billing_price\" : 0,\n      })\n    }\n  },[form])\n\n  const updateMarginAgreedForThisFlow = useCallback(() => {\n    if (form.getFieldValue(\"trip_cost\") && form.getFieldValue(\"min_cost_for_trip\")) {\n      form.setFieldsValue({\n        \"agreed_margin\" : _.round((form.getFieldValue(\"trip_cost\")/form.getFieldValue(\"min_cost_for_trip\")-1)*100,2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"agreed_margin\" : 0,\n      })\n    }\n  },[form])\n\n  const updateGrossMargins = useCallback(() => {\n    if (form.getFieldValue(\"trip_cost\") && form.getFieldValue(\"operating_cost\")) {\n      form.setFieldsValue({\n        \"gross_margins\" : _.round(((form.getFieldValue(\"trip_cost\")-form.getFieldValue(\"operating_cost\"))/form.getFieldValue(\"trip_cost\")*100),2),\n      })\n    } else {\n      form.setFieldsValue({\n        \"gross_margins\" : 0,\n      })\n    }\n  },[form])\n\n  useEffect( () => {\n    updateDirectCost();\n    updateOperatingCost();\n    updateContingencyMargin();\n    updateMinCostToBillForATrip();\n    updatePriceShouldBeBilled();\n    updateMarginAgreedForThisFlow();\n    updateGrossMargins();\n  }, [] )\n\n  const handleFieldsChange = useCallback(data => {\n\n    if(data[0]){\n      if(data[0].name) {\n\n        const currentInputField = data[0].name[0];\n        console.log(currentInputField);\n\n        if (currentInputField===\"trip_cost\") {\n          updateMarginAgreedForThisFlow();\n          updateGrossMargins();\n        }\n\n      }\n    }\n\n  \t},[form,])\n\n\n  return (\n    <Spin spinning={loading}>\n      <Divider orientation='left'>Opex</Divider>\n      <Form\n        onFinish={submit}\n        form={form}\n        initialValues={\n          { ...state }\n        }\n        layout='vertical'\n        onFieldsChange={handleFieldsChange}\n        // hideRequiredMark\n        autoComplete='off'\n      >\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(0, 4).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(0, 4).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(4, 8).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(4, 8).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(8, 12).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(8,12).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(12, 16).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(12,16).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(16, 18).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {item.customLabel}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row style={{ justifyContent: 'left' }}>\n          {operatingCostMonthlyFormFields.slice(16,18).map((item, idx) => (\n            <Col span={6}>\n              <div key={idx.toString()} className='p-2'>\n                {formItem(item)}\n              </div>\n            </Col>\n          ))}\n        </Row>\n        <Row justify='space-between'>\n          <div className='row'>\n            <Button type='primary' htmlType='submit'>\n              Submit\n            </Button>\n            <div className='p-2' />\n            <Button type='primary' onClick={onCancel}>\n              Cancel\n            </Button>\n          </div>\n        </Row>\n      </Form>\n    </Spin>\n  );\n};\n\nexport default LogisticCreateCPForm;\n\n"],"sourceRoot":""}